package Ads

import (
	"Vk-api-go/types"
	"context"
	"encoding/json"
	"fmt"
	"net/url"
	"strconv"
)

// UpdateAdsTargeting Описывает структуру таргетинга
type UpdateAdsTargeting struct {
	Sex int32 `json:"sex"` //Пол. Возможные значения:
	//0 — любой.
	//1 — женский.
	//2 — мужской.
	AgeFrom  int32 `json:"age_from"` //Нижняя граница возраста. 0 — не задано. Допустимый диапазон: от 14 до 80.
	AgeTo    int32 `json:"age_to"`   //Верхняя граница возраста. 0 — не задано. Допустимый диапазон: от 14 до 80.
	Birthday int32 `json:"birthday"` //День рождения. Задается в виде суммы флагов:
	//+1 — сегодня.
	//+2 — завтра.
	//+4 — в течение недели.
	Country   int32  `json:"country"`    //Идентификатор страны. 0 — не задано.
	Cities    string `json:"cities"`     //Идентификаторы городов и регионов. Идентификаторы регионов необходимо указывать со знаком «минус».
	CitiesNot string `json:"cities_not"` //Идентификаторы городов и регионов, которые следует исключить из таргетинга. Идентификаторы регионов необходимо указывать со знаком «минус».
	GeoNear   string `json:"geo_near"`   //Места для гео-таргетинга. Список точек, разделённых «;». Каждая точка задаётся строкой вида <широта>,<долгота>,<радиус>[,название места].
	//Широта и долгота задаются в десятичной записи градусов, радиус в метрах из списка допустимых:
	//500, 1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000, 6000, 7000, 8000, 9000, 10000, 11000,
	//12000, 13000, 14000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000,
	//70000, 75000, 80000, 85000, 90000, 95000, 100000.
	//Использование этого критерия несовместимо с критериями country, cities и cities_not.
	GeoPointType string `json:"geo_point_type"` //Тип мест гео-таргетинга. Используется только вместе с критерием geo_near. Возможные значения:
	//regular — регулярно бывает.
	//home — дом.
	//work — работа или учёба.
	//online — текущее местоположение. Только для ad_format=9 и 11, ad_platform=all или mobile и радиуса <=5 000 м.
	Statuses string `json:"statuses"` //Cемейное положение, значения перечисляются через запятую. Возможные значения:
	//1 — Не женат/Не замужем.
	//2 — Есть подруга/Есть друг.
	//3 — Полмолвлен(а).
	//4 — Женат/Замужем.
	//5 — Все сложно.
	//6 — В активном поиске.
	//7 — Влюблен/влюблена.
	//8 — В гражданском браке.
	Groups        string `json:"groups"`         //Идентификаторы сообществ, разделенные запятой.
	GroupsNot     string `json:"groups_not"`     //Идентификаторы сообществ, разделенные запятой, которые следует исключить из таргетинга.
	GroupsFormula string `json:"groups_formula"` //Формула, состоящая из идентификаторов сообществ, логических связок |, &, ! и скобок для приоритета операций.
	// Недопустимо использование вместе с параметрами groups или group_not.
	GroupsActive        string `json:"groups_active"`         //Идентификаторы сообществ, разделенные запятой, в которых пользователь проявлял активность.
	GroupsActiveFormula string `json:"groups_active_formula"` // Формула, состоящая из идентификаторов сообществ, логических связок |, &, ! и скобок для приоритета операций.
	// Недопустимо использование вместе с параметром groups_active.
	MusicArtistsFormula string `json:"music_artists_formula"` //Формула, состоящая из идентификаторов музыкантов, логических связок |, &, ! и скобок для приоритета операций.
	KeyPhrases          string `json:"key_phrases"`           //Формула, состоящая из ключевых фраз, логических связок |, &, ! и скобок для приоритета операций. Слова ключевых фраз могут состоять из букв русского/английского алфавитов, цифр и дефиса, должны быть отделены пробелами между собой.
	//Пример: (кошачий корм | красно-белое платье)&!(купить онлайн)
	KeyPhrasesDays            int64  `json:"key_phrases_days"`            //Если задана формула ключевых фраз, то дополнительно можно указать период поиска — от 1 до 30 дней. Если поле отсутствует, то автоматически будет выбрано 7 дней.
	Apps                      string `json:"apps"`                        //Идентификаторы приложений, разделенные запятой.
	AppsNot                   string `json:"apps_not"`                    //Идентификаторы приложений, разделенные запятой, которые следует исключить из таргетинга.
	Districts                 string `json:"districts"`                   //Идентификаторы районов, разделенные запятой.
	Stations                  string `json:"stations"`                    //Идентификаторы станций метро, разделенные запятой.
	Streets                   string `json:"streets"`                     //Идентификаторы улиц, разделенные запятой.
	Schools                   string `json:"schools"`                     //Идентификаторы учебных заведений.
	Positions                 string `json:"positions"`                   //Идентификаторы должностей.
	Religions                 string `json:"religions"`                   //Идентификаторы религиозных взглядов.
	InterestCategories        string `json:"interest_categories"`         //Категории интересов.
	InterestCategoriesFormula string `json:"interest_categories_formula"` //Формула, состоящая из категорий интересов, логических связок |, &, ! и скобок для приоритета операций. Недопустимо использование вместе с параметром interest_categories.
	Interests                 string `json:"interests"`                   //Интересы.
	UserDevices               string `json:"user_devices"`                //Устройства.
	UserOs                    string `json:"user_os"`                     //Операционные системы.
	UserBrowsers              string `json:"user_browsers"`               //Интернет-браузеры.
	RetargetingGroups         string `json:"retargeting_groups"`          //Идентификаторы групп ретаргетинга.
	RetargetingGroupsNot      string `json:"retargeting_groups_not"`      //Идентификаторы групп ретаргетинга, которые следует исключить из таргетинга.
	EventsRetargetingGroups   int    `json:"events_retargeting_groups"`   //Только для ad_format = 9 и 11. Описание событий, собираемых в группы ретаргетинга. Массив объектов, где ключом является идентификатор группы ретаргетинга, а значением — массив событий. Допустимые значений для событий:
	//1 — просмотр промопоста.
	//2 — переход по ссылке или переход в сообщество.
	//3 — переход в сообщество.
	//4 — подписка на сообщество.
	//5 — отписка от новостей сообщества.
	//6 — скрытие или жалоба.
	//10 — запуск видео.
	//11 — досмотр видео до 3с.
	//12 — досмотр видео до 25%.
	//13 — досмотр видео до 50%.
	//14 — досмотр видео до 75%.
	//15 — досмотр видео до 100%.
	//20 — лайк продвигаемой записи.
	//21 — репост продвигаемой записи.
	Paying int `json:"paying"` //Платежи. Возможные значения:
	//1 — не использовали голоса ВКонтакте.
	//2 — использовали голоса ВКонтакте.
	Travellers int `json:"travellers"`  //Только путешественники (1 — включить фильтр).
	SchoolFrom int `json:"school_from"` //Нижняя граница года окончания школы (0 — не задано).
	SchoolTo   int `json:"school_to"`   //Верхняя граница года окончания школы (0 — не задано).
	UniFrom    int `json:"uni_from"`    //Нижняя граница года окончания вуза (0 — не задано).
	UniTo      int `json:"uni_to"`      //Верхняя граница года окончания вуза (0 — не задано).
}

// UpdateAdsSpecification описывает структуру рекламного объявления
type UpdateAdsSpecification struct {
	AdID       int `json:"ad_id"`       //Идентификатор рекламного кабинета.
	CampaignId int `json:"campaign_id"` //Идентификатор кампании, в которой будет создаваться объявление.
	AdFormat   int `json:"ad_format"`   //Формат объявления:
	//1 — изображение и текст.
	//2 — большое изображение.
	//4 — продвижение сообществ или приложений, квадратное изображение. Заголовок объявления (title) должен совпадать с названием сообщества/приложения.
	//8 — специальный формат сообществ.
	//9 — запись в сообществе (рекламная запись может быть создана с помощью метода wall.postAdsStealth).
	//11 — адаптивный формат.
	Autobidding bool `json:"autobidding"` //Флаг, может принимать значения 0 или 1. Автоматическое управление ценой:
	//0 — оплата за переходы.
	//1 — оплата за показы (включая цель «Максимум показов»).
	//3 — оптимизированная оплата за показы.
	AutobiddingMaxCost string `json:"autobidding_max_cost"` //Максимальное ограничение автоматической ставки в рублях с копейками, 0 — снятие ограничения.
	CostType           int    `json:"cost_type"`            //Флаг, может принимать значения 0 или 1 Способ оплаты:
	//0 — оплата за переходы.
	//1 — оплата за показы (включая цель «Максимум показов»).
	//3 — оптимизированная оплата за показы.
	Cpc              float64 `json:"cpc"`               //Если cost_type равен 0 — цена за переход. Цена указывается в рублях с копейками в дробной части.
	Cpm              float64 `json:"cpm"`               //Если cost_type равен 1 — цена за 1000 показов. Цена указывается в рублях с копейками в дробной части.
	Ocpm             float64 `json:"ocpm"`              //Если cost_type равен 3 — цена за действие для oCPM. Цена указывается в рублях с копейками в дробной части.
	GoalType         int     `json:"goal_type"`         //Обязательный параметр, если cost_type равен 3. Тип цели.
	ImpressionsLimit int     `json:"impressions_limit"` // Если ad_format = 9 или 11 и cost_type = 1 — ограничение количества показов данного объявления на одного пользователя.
	// Допустимые значения: 1, 2, 3, 5, 10, 15, 20.
	ImpressionsLimited bool `json:"impressions_limited"` //Флаг, может принимать значения 0 или 1. Если cost_type равен 1 и impressions_limit не может быть задан — признак того, что количество показов объявления на одного пользователя ограничено.
	//0 — нет ограничения.
	//1 — не более 100 показов на одного пользователя.
	ImpressionsLimitPeriod int `json:"impressions_limit_period"` //Если ad_format = 9 или 11 и cost_type = 1 — может быть задан период ограничения на количество показов на одного пользователя. Значение задается в секундах, должно быть кратно суткам (86400 секунд), максимум 90 суток При наступлении нового периода счетчик показов сбрасывается.
	//0 — отключает сброс счетчика показов.
	AdPlatform string `json:"ad_platform"` //Рекламные площадки, на которых будет показываться объявление:
	//(если ad_format равен 1 и cost_type равен 0):
	//0 — ВКонтакте и сайты-партнёры.
	//1 — только ВКонтакте.
	//(если ad_format равен 9):
	//all — все площадки.
	//desktop — полная версия сайта.
	//mobile — мобильный сайт и приложения.
	//(если ad_format равен 11):
	//all — все площадки.
	//desktop — полная версия сайта.
	//mobile — мобильный сайт и приложения.
	AdPlatformNoWall      int    `json:"ad_platform_no_wall"`       //Только для ad_format = 9 или 11. 1 — не показывать объявление на стенах сообществ (по умолчанию 0).
	AdPlatformNoAdNetwork int    `json:"ad_platform_no_ad_network"` //Только для ad_format = 9 или 11. 1 — не показывать объявление в рекламной сети (по умолчанию 0).
	PublisherPlatforms    string `json:"publisher_platforms"`       //Только для ad_format = 9 или 11 На каких площадках будет показываться объявление:
	//all — все площадки (по умолчанию).
	//social — все соцсети (ВКонтакте и Одноклассники).
	//vk — только ВКонтакте.
	DayLimit       uint `json:"day_limit"`       //Дневной лимит в рублях.
	AllLimit       uint `json:"all_limit"`       //Общий лимит в рублях.
	Category1Id    uint `json:"category1_id"`    //ID тематики или подраздела тематики объявления. Если объявление имеет несколько тематик, то дополнительную можно задать в параметре category2_id. Смотрите ads.getCategories.
	Category2Id    uint `json:"category2_id"`    //Идентификатор тематики или подраздела тематики объявления.
	AgeRestriction int  `json:"age_restriction"` //Отображение отметки возрастного ограничения на объявлении.
	//0 — не отображать отметку.
	//1 — использовать отметку 0+.
	//2 — использовать отметку 6+.
	//3 — использовать отметку 12+.
	//4 — использовать отметку 16+.
	//5 — использовать отметку 18+.
	Status      bool   `json:"status"`      //Флаг, может принимать значения 0 или 1 Статус рекламного объявления (0 — остановлено, 1 — запущено).
	Name        string `json:"name"`        //Строка длиной от 3 до 60 символов. Название объявления (для использования в рекламном кабинете).
	Title       string `json:"title"`       //Строка длиной от 3 до 33 символов. Для ad_format = 11 — до 25 символов. Заголовок объявления. Может быть задан только для некоторых рекламных
	Description string `json:"description"` //Строка длиной от 3 до 70 символов. Для ad_format = 11 — до 90 символов. Описание объявления. Может быть задано только для некоторых рекламных
	LinkUrl     string `json:"link_url"`    //Ссылка на рекламируемый объект в формате:
	//http://yoursite.com
	//https://vk.com/wall-22822305_383737
	//http://vk.cоm/club1
	//Если в ссылке содержатся строки {ad_id} или {campaign_id}, то они заменяются соответственно на идентификатор объявления и идентификатор кампании в момент перехода пользователя по такой ссылке.
	LinkDomain  string `json:"link_domain"`  // Домен рекламируемого объекта в формате yoursite.com.
	LinkTitle   string `json:"link_title"`   //Строка длиной от 3 до 25 символов. Заголовок рядом с кнопкой/ссылкой. Может быть задан только для некоторых рекламных форматов.
	LinkButton  string `json:"link_button"`  //Идентификатор кнопки объявления. Может быть задан только для некоторых рекламных форматов
	Photo       string `json:"photo"`        //Основное изображение. Может быть передано только для некоторых рекламных форматов. В качестве значения должен быть передан результат загрузки изображения на сервер. Если ad_format равен 4 или 5, то этот параметр можно не передавать и в этом случае будет использовано изображение из сообщества или приложения.
	PhotoIcon   string `json:"photo_icon"`   //Логотип. Может быть передано только для некоторых рекламных форматов. В качестве значения должен быть передан результат загрузки изображения на сервер.
	Video       string `json:"video"`        //Основное видео. Может быть передано только для адаптивного формата. В качестве значения должен быть передан результат загрузки видео на сервер.
	RepeatVideo bool   `json:"repeat_video"` //Флаг, может принимать значения 0 или 1. Зацикливание видео. Возможные значения:
	//0 — не зацикливать видео.
	//1 — зацикливать видео.
	DisclaimerMedical bool `json:"disclaimer_medical"` //Флаг, может принимать значения 0 или 1. Отображение предупреждения: «Есть противопоказания. Требуется консультация специалиста.»
	//1 — включить отображение.
	DisclaimerSpecialist bool `json:"disclaimer_specialist"` //Флаг, может принимать значения 0 или 1. Отображение предупреждения: «Необходима консультация специалистов.»
	//1 — включить отображение.
	DisclaimerSupplements bool `json:"disclaimer_supplements"` //Флаг, может принимать значения 0 или 1. Отображение предупреждения: «БАД. Не является лекарственным препаратом.»
	//1 — включить отображение.
	WeeklyScheduleHours       [7][]int           `json:"weekly_schedule_hours"`        //Расписание показа объявления по часам. Массив из семи строк. Каждая из строк соответствует дню недели и содержит последовательность символов 0 или 1. 0 — не показывать объявление в час, номер которого равен позиции символа. 1 — показывать. При вызове метода с этим параметром также необходимо обязательно указывать параметр weekly_schedule_use_holidays.
	WeeklyScheduleUseHolidays bool               `json:"weekly_schedule_use_holidays"` //Флаг, может принимать значения 0 или 1. Использовать ли расписание воскресенья в праздничные дни.
	StatsUrl                  string             `json:"stats_url"`                    //Пиксель внешней статистики. Доступно в избранных кабинетах.
	StatsUrl2                 string             `json:"stats_url2"`                   //Дополнительный пиксель внешней статистики. Доступно в избранных кабинетах.
	TargetingConfig           UpdateAdsTargeting `json:"targeting_config"`             //Набор полей, соответствующих настройкам таргетинга.
}

// UpdateAdsRequest структура для передачи в функцию
type UpdateAdsRequest struct {
	UpdateAdsSpecification []UpdateAdsSpecification `json:"ad_specification"`
}

// UpdateAdsSerialize сериализует массив UpdateAdsSpecification в JSON
func UpdateAdsSerialize(UpdateAdsSpecification []UpdateAdsSpecification) (string, error) {
	request := UpdateAdsRequest{
		UpdateAdsSpecification: UpdateAdsSpecification,
	}

	jsonData, err := json.Marshal(request)
	if err != nil {
		return "", fmt.Errorf("ошибка сериализации: %w", err)
	}

	return string(jsonData), nil
}

// UpdateAds Редактирует рекламные объявления.
// Для вызова метода можно использовать:
// •ключ доступа пользователя (требуются права доступа: ads)
func (am *AddMethods) UpdateAds(ctx context.Context, accountID int, data string) (types.VkResponse, error) {
	params := url.Values{}
	params.Set("account_id", strconv.Itoa(accountID))
	params.Set("data", data)
	VkRequest := types.VkRequest{
		Method: "ads.updateAds",
		Params: params,
	}
	fmt.Println(VkRequest.Params)
	return am.methods.Call(ctx, VkRequest)
}
